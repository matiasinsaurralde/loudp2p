// Code generated by protoc-gen-go.
// source: service.proto
// DO NOT EDIT!

package loud

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/any"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Loud service

type LoudClient interface {
	Hello(ctx context.Context, in *HelloMessage, opts ...grpc.CallOption) (*DummyMessage, error)
	// rpc Handshake (HandshakeMessage) returns (HandshakeMessage) {}
	Dispatch(ctx context.Context, opts ...grpc.CallOption) (Loud_DispatchClient, error)
}

type loudClient struct {
	cc *grpc.ClientConn
}

func NewLoudClient(cc *grpc.ClientConn) LoudClient {
	return &loudClient{cc}
}

func (c *loudClient) Hello(ctx context.Context, in *HelloMessage, opts ...grpc.CallOption) (*DummyMessage, error) {
	out := new(DummyMessage)
	err := grpc.Invoke(ctx, "/loud.Loud/Hello", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loudClient) Dispatch(ctx context.Context, opts ...grpc.CallOption) (Loud_DispatchClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Loud_serviceDesc.Streams[0], c.cc, "/loud.Loud/Dispatch", opts...)
	if err != nil {
		return nil, err
	}
	x := &loudDispatchClient{stream}
	return x, nil
}

type Loud_DispatchClient interface {
	Send(*google_protobuf.Any) error
	Recv() (*google_protobuf.Any, error)
	grpc.ClientStream
}

type loudDispatchClient struct {
	grpc.ClientStream
}

func (x *loudDispatchClient) Send(m *google_protobuf.Any) error {
	return x.ClientStream.SendMsg(m)
}

func (x *loudDispatchClient) Recv() (*google_protobuf.Any, error) {
	m := new(google_protobuf.Any)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Loud service

type LoudServer interface {
	Hello(context.Context, *HelloMessage) (*DummyMessage, error)
	// rpc Handshake (HandshakeMessage) returns (HandshakeMessage) {}
	Dispatch(Loud_DispatchServer) error
}

func RegisterLoudServer(s *grpc.Server, srv LoudServer) {
	s.RegisterService(&_Loud_serviceDesc, srv)
}

func _Loud_Hello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoudServer).Hello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/loud.Loud/Hello",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoudServer).Hello(ctx, req.(*HelloMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Loud_Dispatch_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(LoudServer).Dispatch(&loudDispatchServer{stream})
}

type Loud_DispatchServer interface {
	Send(*google_protobuf.Any) error
	Recv() (*google_protobuf.Any, error)
	grpc.ServerStream
}

type loudDispatchServer struct {
	grpc.ServerStream
}

func (x *loudDispatchServer) Send(m *google_protobuf.Any) error {
	return x.ServerStream.SendMsg(m)
}

func (x *loudDispatchServer) Recv() (*google_protobuf.Any, error) {
	m := new(google_protobuf.Any)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Loud_serviceDesc = grpc.ServiceDesc{
	ServiceName: "loud.Loud",
	HandlerType: (*LoudServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Hello",
			Handler:    _Loud_Hello_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Dispatch",
			Handler:       _Loud_Dispatch_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "service.proto",
}

func init() { proto.RegisterFile("service.proto", fileDescriptor2) }

var fileDescriptor2 = []byte{
	// 163 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0xe2, 0x2d, 0x4e, 0x2d, 0x2a,
	0xcb, 0x4c, 0x4e, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0xc9, 0xc9, 0x2f, 0x4d, 0x91,
	0x92, 0x4c, 0xcf, 0xcf, 0x4f, 0xcf, 0x49, 0xd5, 0x07, 0x8b, 0x25, 0x95, 0xa6, 0xe9, 0x27, 0xe6,
	0x55, 0x42, 0x14, 0x48, 0x09, 0x67, 0xa4, 0xe6, 0xe4, 0xe4, 0xc7, 0xe7, 0xa6, 0x16, 0x17, 0x27,
	0xa6, 0xa7, 0xc2, 0x04, 0x53, 0x4a, 0x73, 0x73, 0x2b, 0x51, 0x05, 0x8d, 0xca, 0xb9, 0x58, 0x7c,
	0xf2, 0x4b, 0x53, 0x84, 0x0c, 0xb9, 0x58, 0x3d, 0x40, 0x7a, 0x84, 0x84, 0xf4, 0x40, 0x86, 0xeb,
	0x81, 0x39, 0xbe, 0x10, 0xa5, 0x52, 0x50, 0x31, 0x17, 0x90, 0x7e, 0xa8, 0x98, 0x12, 0x83, 0x90,
	0x0d, 0x17, 0x87, 0x4b, 0x66, 0x71, 0x41, 0x62, 0x49, 0x72, 0x86, 0x90, 0x88, 0x1e, 0xc4, 0x31,
	0x7a, 0x30, 0xc7, 0xe8, 0x39, 0xe6, 0x55, 0x4a, 0x61, 0x15, 0x55, 0x62, 0xd0, 0x60, 0x34, 0x60,
	0x4c, 0x62, 0x03, 0x8b, 0x19, 0x03, 0x02, 0x00, 0x00, 0xff, 0xff, 0x26, 0xac, 0x40, 0xc9, 0xdb,
	0x00, 0x00, 0x00,
}
